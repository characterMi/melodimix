importScripts("/appVersion.js");

const assets = [
  "/",
  "/search",
  "/offline.html",
  "/manifest.webmanifest",
  "/cacheWorker.js",
  "/logo.svg",
  "/icons/offline.png",
  "/images/liked.png",
  "/images/1.jpg",
  "/images/2.jpg",
  "/images/d1.png",
  "/images/d2.png",
  "/images/d3.png",
  "/icons/melodimix-192.png",
  "/icons/melodimix-192-maskable.png",
  "/icons/melodimix-512.png",
  "/icons/melodimix-512-maskable.png",
];

const assetsCacheName = "assets" + VERSION;
const cacheNames = new Set([assetsCacheName, "song-urls", "songs"]);

const SUPABASE_HOSTNAME = "ibmcmrwzbejntporrerq.supabase.co";

self.addEventListener("install", (event) => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(assetsCacheName);
      await Promise.allSettled(assets.map((url) => cache.add(url)));

      self.skipWaiting();
    })()
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches
      .keys()
      .then((keys) =>
        Promise.allSettled([
          ...keys
            .filter((key) => !cacheNames.has(key))
            .map((key) => caches.delete(key)),
          self.clients.claim(),
        ])
      )
  );
});

self.addEventListener("fetch", (event) => {
  const eventUrl = new URL(event.request.url);

  // Don't cache the token (login code)
  if (eventUrl.searchParams.has("code")) {
    event.respondWith(fetchReq(event.request));
    return;
  }

  // caching songs and song-urls from supabase
  if (eventUrl.hostname === SUPABASE_HOSTNAME) {
    if (eventUrl.pathname.startsWith("/rest/v1/songs")) {
      event.respondWith(cacheOnly(event.request, "song-urls"));
      return;
    }

    if (eventUrl.pathname.startsWith("/storage/v1/object/public/songs")) {
      event.respondWith(cacheOnly(event.request, "songs"));
      return;
    }

    // don't cache any token...
    if (eventUrl.pathname.startsWith("/auth/v1/token")) {
      event.respondWith(fetchReq(event.request));
      return;
    }
  }

  // Next.js related things...
  if (eventUrl.searchParams.has("_rsc")) {
    event.respondWith(fetchReq(event.request));
    return;
  }

  // static files
  if (eventUrl.host === self.location.hostname) {
    // static files generated by Next.js
    if (
      eventUrl.pathname.startsWith("/_next/static/") // JS, CSS, fonts
    ) {
      event.respondWith(staleWhileRevalidate(event.request, assetsCacheName));
      return;
    }

    // images generated by Next.js
    if (eventUrl.pathname.startsWith("/_next/image/")) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }

    // cached files in assets
    if (assets.includes(eventUrl.pathname)) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }
  }

  // if the requested page is in the cache we respond with it, if not, we respond with the offline page...
  if (
    event.request.mode === "navigate" ||
    event.request.headers.get("accept")?.includes("text/html")
  ) {
    event.respondWith(
      staleWhileRevalidate(event.request, assetsCacheName, true)
    );
    return;
  }

  // other requests...
  if (event.request.method === "GET") {
    event.respondWith(staleWhileRevalidate(event.request, assetsCacheName));
    return;
  }

  // we don't cache any other method...
  event.respondWith(fetchReq(event.request));
});

async function cacheOnly(req, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(req);

  if (cachedResponse) return cachedResponse.clone();

  return fetchReq(req, cache);
}

async function staleWhileRevalidate(req, cacheName, returnOffline = false) {
  // if the request was for a html page, we ignore search params...
  const cacheProps = returnOffline ? { ignoreSearch: true } : undefined;
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(req, cacheProps);
  const fetchRes = await fetchReq(req, cache, returnOffline);

  return cachedResponse || fetchRes;
}

async function fetchReq(req, cache = null, returnOffline = false) {
  return fetch(req, { cache: "no-cache" })
    .then(async (networkRes) => {
      if (cache && networkRes.ok) await cache.put(req.url, networkRes.clone());
      return networkRes;
    })
    .catch(async () => {
      if (returnOffline) {
        const assetsCache = await caches.open(assetsCacheName);
        const offlinePage = await assetsCache.match("/offline.html");

        if (offlinePage) return offlinePage;

        console.warn("Offline page not found in cache");
      }

      return new Response(
        "Network error and no cached data available. see the browser's console for more information",
        {
          status: 503,
          statusText: "Service Unavailable.",
          headers: { "Content-Type": "text/plain" },
        }
      );
    });
}
